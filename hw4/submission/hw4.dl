/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType, d:DescriptionType)
.decl Desc(p:symbol, d:symbol)

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)
Desc(x,y) :- parent_child(x,y).
Desc(x,z) :- Desc(x,y), parent_child(y,z).
p1(x,d) :- Desc("Priscilla",x), person(x,d).

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)
.decl CountChild(p:symbol, c:number)
//.decl CountMale(x:symbol, p:symbol, c:number)

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)
CountChild(p,c) :- parent_child(p,_), c = count : { parent_child(p,_) }.
p2(x,d,m) :- female(x), CountChild(x,m), person(x,d), m = max c : { female(p), CountChild(p,c) }.
p2(y,d,m) :- male(y), CountChild(y,m), person(y,d), m = max c : { male(p), CountChild(p,c) }.

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)
//.decl Parents(x:PersonType, y:PersonType, c:PersonType)
.decl Gen(p:PersonType, c:number)

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)
//.output Parents(IO=stdout)
//Parents(x,y,c) :- person_living(c), female(x), male(y), parent_child(x,c), parent_child(y,c).
// Tried to think this as a base-case where we'd keep adding generations upwards and count
// but not able to understand fully how to do that.  :(
Gen(p,c) :- person_living(x), parent_child(p,x), c = 0.
Gen(p,c) :- Gen(p,c), person_living(x), parent_child(p,x), c = c + 1.
p3(x,m1,m2) :- person_living(x), m1 = min c : { Gen(x,c)} , m2 = max c : { Gen(x,c) }.

/************* problem 4 **************/
.decl p4(x:PersonType)
.decl AllM(m:PersonType)

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)
// Below is all matriarchs, stuck on finding CMAs
AllM(m0) :- person_living(x), female(m0), parent_child(m0,x).
AllM(m1) :- female(m1), AllM(p), parent_child(m1,p).
p4(x) :- AllM(x).

/************* problem 5 **************/
.decl p5(x:PersonType)

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)
// Since was not able to do 3, incomplete 4, I feel
// like I would need to use both predicates
// where I would look at the CMAs (p4), then compare
// their generations (p3).  :(